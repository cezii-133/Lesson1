Стратегия - 1 
 Есть игра в которой кошка должна сидеть на месте, ходить по дому, спать и есть
 Если кошки находится на месте (сидит и спит) то расходует очень мало кол-во энергии
 Энергия пополняется если кошка поест
 
 Создаем 4 класса с названиями Sitting, Walking, Sleeping, Eating
 Во всех 4 классах добавляем метод Debugable();

 Создаем Класс Cat
 В классе Cat создаем метод с названием ChangeCatState() в параметр передаем созданный ниже интерфейс
 Получится примерно так ChangeCatState(ICatController iCat)

 Создаем интерфейс ICatController или же просто ICat
 Ко всем 4 класса(Sitting, Walking, Sleeping, Eating) добавляем реализацию интрефейса ICatController и убираем наследование от MonoBehaviour
 Интерфейс ICatController имеет метод GetEnergy() и Debugable();

 Через базовый Input.GetKeyDown делаем управление кошке
 KeyCode.A - Кошка садится на место 
 KeyCode.B - Кошка ходит
 KeyCode.C - Кошка спит
 KeyCode.D - Кошка ест

 В классе Cat создаем создаем метод не с приватным модификатором доступа (public, protected...), но не private
 Также в классе Cat создаем приватный интерфейс private ICatController iCat;

 Создаем класс GameCore
 В классе GameCore объявляем поле с классом Cat
 В методе Start() или же Awake() класса GameCore вызываем метод класса Cat под названием ChangeCatState и передаем туда в виде параметра 
 класс Sitting: cat.ChangeCatState(new Sitting());
 Создаем экземпляр класса Sitting 
 После этого в каждом из четырех классов добавляем разную реализацию метода Debugable()
 Кошка сидит, кошка ходит, кошка спит, кошка есть
 
 Изначально, при входе в игру мы получим Debug с текстом "Кошка сидит"
 После нажатия на какую либо клавишу из A-B-C-D мы получим Debug с текстом в зависимости от того что кошка делает, так как в методе Update класса GameCore  
 мы вызываем доступный для нас метод ChangeCatState от класса Cat
 public void ChangeCatState(ICatController iCat){
  this.iCat = iCat;
  this.iCat.Debugable();
  // Тут мы получим Debug
 }
 
 Теперь при помощи класса GameCore мы можем менять состояние класса Cat, при том класс Cat не в курсе чем кошка занята сейчас
 
 