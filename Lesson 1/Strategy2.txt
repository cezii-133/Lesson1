Стратегия - 2
 Есть игра с поездами
 Суть такова что мы упраляем главным тепловозом, он перевозит вагоны 
 Состав может быть полным, настолько что не получится добавить вагон, пустым, где один тепловоз и частично заполненым
 В случае частичной заполнености состав может отбрасывать или добавлять себе вагоны
 В случае полной загруженности только отбрасывать, ну и в случае пустого состава только прибавлять вагоны без возможности отбросить

 Создаем 3 класса FullTrain, EmptyTrain, MediumTrain
 Создаем интерфейс ITrain, в данный интерфейс добавляем два метода Add(), Substract()
 Классы FullTrain, EmptyTrain, MediumTrain должны реализовать интерфейс ITrain, в них убираем наследование от MonoBehaviour

 Создаем класс Train в нем создаем приватный интерфейс
 private ITrain _iTrain;

 В классе GameCore создаем список internal static List<int> _trainLenght = new List<int>();

 В методе Start класса GameCore() создаем рандомное значение для листа
 int rand = Random.Range(1,11);
 for(int i = 0; i < rand; i ++)
  _trainLenght.Add(i);

 После этого создаем какую-то условную логику для самого поезда
 Если поезд приехал в депо и длина _trainLenght равна нулю(состав пустой) то тогда мы заполняем его
 Если меньше пять то также заполняем, если больше 5 то заполняем или разгружаем, если 10 то разгружаем

 В классе GameCore() создаем метод под названием ChangeTrainState();
 Этот метод должен вызывать публичный метод от класса Train и в виде аргумента передавать туда один из классов FullTrain, EmptyTrain, MediumTrain, в зависимости от логики

 Во всех классах FullTrain, EmptyTrain, MediumTrain должны быть Debug с текстом - вагон добавлен или же вагон убран

 В зависимости от игровой логики наш класс GameCore может переключаться между разными состояниями поездов (добавить или убрать вагон)

 На каждый метод Add и Substract мы можем вызывать метод CheckTrainLenght() класса GameCore который будет проверять состояние длину List и в зависимости от этого проверять нужно ли поезду изменить
 текущее состояние при помощи ChangeTrainState() => train.ChangeTrainState(new тут состояние которое нужно передать, к слову new EmptyTrain());



 
 
 
 

 
